--------------------------------------------------------------------------------
module Firefly.Vector
    ( Vector (..)
    , (.+.)
    , (.-.)
    ) where


--------------------------------------------------------------------------------
import           Data.Monoid (Monoid (..))


--------------------------------------------------------------------------------
data Vector = Vector
    { vectorX :: {-# UNPACK #-} !Double
    , vectorY :: {-# UNPACK #-} !Double
    } deriving (Show)


--------------------------------------------------------------------------------
instance Monoid Vector where
    mempty  = Vector 0 0
    mappend = (.+.)


--------------------------------------------------------------------------------
(.+.) :: Vector -> Vector -> Vector
(Vector x1 y1) .+. (Vector x2 y2) = Vector (x1 + x2) (y1 + y2)


--------------------------------------------------------------------------------
(.-.) :: Vector -> Vector -> Vector
(Vector x1 y1) .-. (Vector x2 y2) = Vector (x1 - x2) (y1 - y2)
